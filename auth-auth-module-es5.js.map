{"version":3,"sources":["webpack:///src/app/auth/admin-sign-in/admin-sign-in.component.ts","webpack:///src/app/auth/admin-sign-in/admin-sign-in.component.html","webpack:///src/app/auth/admin-sign-in/admin-sign-in.service.ts","webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/jwt.service.ts","webpack:///src/app/shared/service/api-service.service.ts"],"names":["AdminSignInComponent","router","formBuilder","apiService","spinner","jwtService","sessionStorage","clear","buildLoginForm","loginForm","group","email","password","required","console","log","value","show","loginAdmin","subscribe","data","adminDetails","error","hide","statusCode","setItem","token","navigate","controls","onLogin","selector","templateUrl","styleUrls","AdminSignInService","postParams","post","providedIn","routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","JwtService","JSON","stringify","helper","parse","getItem","decodedToken","decodeToken","ApiServiceService","http","getRawToken","httpOptions","headers","ErrorEvent","message","status","pathUrl","get","apiUrl","setHeaders","pipe","handleError","postUrl","body","delUrl","putUrl","put"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { JwtService } from './../jwt.service';\nimport { AdminSignInService } from './admin-sign-in.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-admin-sign-in',\n  templateUrl: './admin-sign-in.component.html',\n  styleUrls: ['./admin-sign-in.component.scss']\n})\nexport class AdminSignInComponent implements OnInit {\n  loginForm: FormGroup;\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private apiService: AdminSignInService,\n    private spinner: NgxSpinnerService,\n    private jwtService: JwtService\n    ) { }\n\n  ngOnInit(): void {\n    sessionStorage.clear();\n    this.buildLoginForm();\n  }\n\n  public buildLoginForm(){\n      this.loginForm = this.formBuilder.group({\n        email: ['', Validators.email],\n        password: ['', Validators.required]\n      });\n  }\n\n  get f() { return this.loginForm.controls; }\n\n  public onLogin() {\n    console.log(this.loginForm.value);\n    this.spinner.show();\n    this.apiService.loginAdmin(this.loginForm.value).subscribe(\n      data => {\n        this.adminDetails(data);\n      },\n      error => {\n        this.spinner.hide();\n        console.log(error);\n      }\n    );\n  }\n\n  private adminDetails(data) {\n    this.spinner.hide();\n    console.log(data);\n    if (data.statusCode === 200){\n      // this.jwtService.setToken()\n      sessionStorage.setItem('token', data.token);\n      this.router.navigate(['/admin']);\n    }\n  }\n\n}\n","<section>\n    <div class=\"container\">\n\n        <!-- Outer Row -->\n        <div class=\"row justify-content-center\">\n\n            <div class=\"col-xl-6 col-lg-6 col-md-6\">\n\n                <div class=\"card o-hidden border-0 shadow-lg my-5\">\n                    <div class=\"card-body p-0\">\n                        <!-- Nested Row within Card Body -->\n                        <div class=\"row\">\n                            <div class=\"col-lg-12\">\n                                <div class=\"login-box\">\n                                    <div class=\"text-center\">\n                                        <img class=\"mb-4\" src=\"../../../assets/logo.png\" alt=\"akuc foundation\" />\n                                      <h3>Admin Portal</h3>\n                                    </div>\n                                    <form [formGroup]=\"loginForm\" class=\"user\">\n                                        <div class=\"form-group\">\n                                            <input type=\"email\" formControlName=\"email\"\n                                                class=\"form-control form-control-user\" id=\"exampleInputEmail\"\n                                                aria-describedby=\"emailHelp\" placeholder=\"Enter Email Address...\">\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <input type=\"password\" formControlName=\"password\"\n                                                class=\"form-control form-control-user\" id=\"exampleInputPassword\"\n                                                placeholder=\"Password\">\n                                        </div>\n                                        <button (click)=\"onLogin()\" class=\"btn btn-primary btn-user btn-block\">\n                                            Login\n                                        </button>\n                                    </form>\n                                    <!-- <hr>\n                                    <div class=\"text-center\">\n                                        <span class=\"small\">Create an Account!</a>\n                                    </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n\n    </div>\n</section>\n","import { Injectable } from '@angular/core';\nimport { ApiServiceService } from 'src/app/shared/service/api-service.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminSignInService {\n\n  constructor(private apiService: ApiServiceService) { }\n\n  public loginAdmin(postParams){\n    return this.apiService.post('auth', postParams);\n  }\n}\n","import { AdminSignInComponent } from './admin-sign-in/admin-sign-in.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminSignInComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AdminSignInComponent } from './admin-sign-in/admin-sign-in.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [AdminSignInComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n\r\n  constructor() { }\r\n\r\n  setToken(token: string) {\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    return true;\r\n  }\r\n  getToken() {\r\n    const helper = new JwtHelperService();\r\n    const token = JSON.parse(sessionStorage.getItem('token'));\r\n    const decodedToken = helper.decodeToken(token);\r\n    return decodedToken;\r\n  }\r\n  getRawToken() {\r\n    return sessionStorage.getItem('token');\r\n  }\r\n}\r\n","import { JwtService } from './../../auth/jwt.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiServiceService {\r\n\r\n\r\n  constructor(private http: HttpClient, private jwtService: JwtService) { }\r\n\r\n  private setHeaders() {\r\n    const token = this.jwtService.getRawToken();\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        // tslint:disable-next-line: object-literal-key-quotes\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return httpOptions;\r\n  }\r\n\r\n//   private setPostHeaders() {\r\n//     const token = this.jwtService.getRawToken();\r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//        // 'Content-Type': \"application/json\",\r\n//         'Authorization': 'Bearer '+token\r\n//       })\r\n//     };\r\n//     return httpOptions;\r\n//   }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // client-side or network error occurred.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      `${JSON.stringify(error.error.error)}`\r\n    );\r\n  }\r\n\r\n  get(pathUrl) {\r\n\r\n    return this.http.get(`${environment.apiUrl}${pathUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  post(postUrl, body: Object) {\r\n    return this.http.post(`${environment.apiUrl}${postUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  delete(delUrl) {\r\n    return this.http.delete(`${environment.apiUrl}${delUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  put(putUrl, body: Object) {\r\n    return this.http.put(`${environment.apiUrl}${putUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n//   postFile(postUrl, body: any) {\r\n//     return this.http.post(`${environment.apiUrl}${postUrl}`, body, this.setPostHeaders() )\r\n//       .pipe(\r\n//         catchError(this.handleError)\r\n//       );\r\n//   }\r\n  /****************The below can be used if the entire http response is required to pass to component**************************/\r\n  // getConfigResponse(): Observable<HttpResponse<any>> {\r\n  //   return this.http.get<any>(\r\n  //     this.configUrl, { observe: 'response' })\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n}\r\n"]}