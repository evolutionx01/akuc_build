{"version":3,"sources":["webpack:///src/app/auth/jwt.service.ts","webpack:///src/app/shared/service/api-service.service.ts"],"names":["JwtService","token","sessionStorage","setItem","JSON","stringify","helper","parse","getItem","decodedToken","decodeToken","providedIn","ApiServiceService","http","jwtService","getRawToken","httpOptions","headers","error","ErrorEvent","console","message","status","pathUrl","get","apiUrl","setHeaders","pipe","handleError","postUrl","body","post","delUrl","putUrl","put"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n\r\n  constructor() { }\r\n\r\n  setToken(token: string) {\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    return true;\r\n  }\r\n  getToken() {\r\n    const helper = new JwtHelperService();\r\n    const token = JSON.parse(sessionStorage.getItem('token'));\r\n    const decodedToken = helper.decodeToken(token);\r\n    return decodedToken;\r\n  }\r\n  getRawToken() {\r\n    return sessionStorage.getItem('token');\r\n  }\r\n}\r\n","import { JwtService } from './../../auth/jwt.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiServiceService {\r\n\r\n\r\n  constructor(private http: HttpClient, private jwtService: JwtService) { }\r\n\r\n  private setHeaders() {\r\n    const token = this.jwtService.getRawToken();\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        // tslint:disable-next-line: object-literal-key-quotes\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return httpOptions;\r\n  }\r\n\r\n//   private setPostHeaders() {\r\n//     const token = this.jwtService.getRawToken();\r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//        // 'Content-Type': \"application/json\",\r\n//         'Authorization': 'Bearer '+token\r\n//       })\r\n//     };\r\n//     return httpOptions;\r\n//   }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // client-side or network error occurred.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      `${JSON.stringify(error.error.error)}`\r\n    );\r\n  }\r\n\r\n  get(pathUrl) {\r\n\r\n    return this.http.get(`${environment.apiUrl}${pathUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  post(postUrl, body: Object) {\r\n    return this.http.post(`${environment.apiUrl}${postUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  delete(delUrl) {\r\n    return this.http.delete(`${environment.apiUrl}${delUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  put(putUrl, body: Object) {\r\n    return this.http.put(`${environment.apiUrl}${putUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n//   postFile(postUrl, body: any) {\r\n//     return this.http.post(`${environment.apiUrl}${postUrl}`, body, this.setPostHeaders() )\r\n//       .pipe(\r\n//         catchError(this.handleError)\r\n//       );\r\n//   }\r\n  /****************The below can be used if the entire http response is required to pass to component**************************/\r\n  // getConfigResponse(): Observable<HttpResponse<any>> {\r\n  //   return this.http.get<any>(\r\n  //     this.configUrl, { observe: 'response' })\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n}\r\n"]}