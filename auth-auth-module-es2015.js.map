{"version":3,"sources":["./src/app/auth/admin-sign-in/admin-sign-in.component.ts","./src/app/auth/admin-sign-in/admin-sign-in.component.html","./src/app/auth/admin-sign-in/admin-sign-in.service.ts","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/jwt.service.ts","./src/app/shared/service/api-service.service.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { JwtService } from './../jwt.service';\nimport { AdminSignInService } from './admin-sign-in.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-admin-sign-in',\n  templateUrl: './admin-sign-in.component.html',\n  styleUrls: ['./admin-sign-in.component.scss']\n})\nexport class AdminSignInComponent implements OnInit {\n  loginForm: FormGroup;\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private apiService: AdminSignInService,\n    private spinner: NgxSpinnerService,\n    private jwtService: JwtService\n    ) { }\n\n  ngOnInit(): void {\n    sessionStorage.clear();\n    this.buildLoginForm();\n  }\n\n  public buildLoginForm(){\n      this.loginForm = this.formBuilder.group({\n        email: ['', Validators.email],\n        password: ['', Validators.required]\n      });\n  }\n\n  get f() { return this.loginForm.controls; }\n\n  public onLogin() {\n    console.log(this.loginForm.value);\n    this.spinner.show();\n    this.apiService.loginAdmin(this.loginForm.value).subscribe(\n      data => {\n        this.adminDetails(data);\n      },\n      error => {\n        this.spinner.hide();\n        console.log(error);\n      }\n    );\n  }\n\n  private adminDetails(data) {\n    this.spinner.hide();\n    console.log(data);\n    if (data.statusCode === 200){\n      // this.jwtService.setToken()\n      sessionStorage.setItem('token', data.token);\n      this.router.navigate(['/admin']);\n    }\n  }\n\n}\n","<section>\n    <div class=\"container\">\n\n        <!-- Outer Row -->\n        <div class=\"row justify-content-center\">\n\n            <div class=\"col-xl-6 col-lg-6 col-md-6\">\n\n                <div class=\"card o-hidden border-0 shadow-lg my-5\">\n                    <div class=\"card-body p-0\">\n                        <!-- Nested Row within Card Body -->\n                        <div class=\"row\">\n                            <div class=\"col-lg-12\">\n                                <div class=\"login-box\">\n                                    <div class=\"text-center\">\n                                        <img class=\"mb-4\" src=\"../../../assets/logo.png\" alt=\"akuc foundation\" />\n                                      <h3>Admin Portal</h3>\n                                    </div>\n                                    <form [formGroup]=\"loginForm\" class=\"user\">\n                                        <div class=\"form-group\">\n                                            <input type=\"email\" formControlName=\"email\"\n                                                class=\"form-control form-control-user\" id=\"exampleInputEmail\"\n                                                aria-describedby=\"emailHelp\" placeholder=\"Enter Email Address...\">\n                                        </div>\n                                        <div class=\"form-group\">\n                                            <input type=\"password\" formControlName=\"password\"\n                                                class=\"form-control form-control-user\" id=\"exampleInputPassword\"\n                                                placeholder=\"Password\">\n                                        </div>\n                                        <button (click)=\"onLogin()\" class=\"btn btn-primary btn-user btn-block\">\n                                            Login\n                                        </button>\n                                    </form>\n                                    <!-- <hr>\n                                    <div class=\"text-center\">\n                                        <span class=\"small\">Create an Account!</a>\n                                    </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n\n    </div>\n</section>\n","import { Injectable } from '@angular/core';\nimport { ApiServiceService } from 'src/app/shared/service/api-service.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminSignInService {\n\n  constructor(private apiService: ApiServiceService) { }\n\n  public loginAdmin(postParams){\n    return this.apiService.post('auth', postParams);\n  }\n}\n","import { AdminSignInComponent } from './admin-sign-in/admin-sign-in.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminSignInComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AdminSignInComponent } from './admin-sign-in/admin-sign-in.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [AdminSignInComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n","import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n\r\n  constructor() { }\r\n\r\n  setToken(token: string) {\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    return true;\r\n  }\r\n  getToken() {\r\n    const helper = new JwtHelperService();\r\n    const token = JSON.parse(sessionStorage.getItem('token'));\r\n    const decodedToken = helper.decodeToken(token);\r\n    return decodedToken;\r\n  }\r\n  getRawToken() {\r\n    return sessionStorage.getItem('token');\r\n  }\r\n}\r\n","import { JwtService } from './../../auth/jwt.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiServiceService {\r\n\r\n\r\n  constructor(private http: HttpClient, private jwtService: JwtService) { }\r\n\r\n  private setHeaders() {\r\n    const token = this.jwtService.getRawToken();\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        // tslint:disable-next-line: object-literal-key-quotes\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return httpOptions;\r\n  }\r\n\r\n//   private setPostHeaders() {\r\n//     const token = this.jwtService.getRawToken();\r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//        // 'Content-Type': \"application/json\",\r\n//         'Authorization': 'Bearer '+token\r\n//       })\r\n//     };\r\n//     return httpOptions;\r\n//   }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // client-side or network error occurred.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      `${JSON.stringify(error.error.error)}`\r\n    );\r\n  }\r\n\r\n  get(pathUrl) {\r\n\r\n    return this.http.get(`${environment.apiUrl}${pathUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  post(postUrl, body: Object) {\r\n    return this.http.post(`${environment.apiUrl}${postUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  delete(delUrl) {\r\n    return this.http.delete(`${environment.apiUrl}${delUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  put(putUrl, body: Object) {\r\n    return this.http.put(`${environment.apiUrl}${putUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n//   postFile(postUrl, body: any) {\r\n//     return this.http.post(`${environment.apiUrl}${postUrl}`, body, this.setPostHeaders() )\r\n//       .pipe(\r\n//         catchError(this.handleError)\r\n//       );\r\n//   }\r\n  /****************The below can be used if the entire http response is required to pass to component**************************/\r\n  // getConfigResponse(): Observable<HttpResponse<any>> {\r\n  //   return this.http.get<any>(\r\n  //     this.configUrl, { observe: 'response' })\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n}\r\n"],"sourceRoot":"webpack:///"}