{"version":3,"sources":["webpack:///src/app/auth/jwt.service.ts","webpack:///src/app/broad-cast/broad-cast-routing.module.ts","webpack:///src/app/broad-cast/broad-cast-view/broad-cast-view.component.ts","webpack:///src/app/broad-cast/broad-cast-view/broad-cast-view.component.html","webpack:///src/app/broad-cast/broad-cast-view/broad-cast-view.service.ts","webpack:///src/app/broad-cast/broad-cast.module.ts","webpack:///src/app/shared/service/api-service.service.ts"],"names":["JwtService","token","sessionStorage","setItem","JSON","stringify","helper","parse","getItem","decodedToken","decodeToken","providedIn","routes","path","component","BroadCastRoutingModule","forChild","imports","exports","BroadCastViewComponent","apiService","spinner","getBroadcastMessages","show","getMessages","subscribe","data","messageDetails","error","hide","console","log","statusCode","messageList","selector","templateUrl","styleUrls","BroadCastViewService","get","BroadCastModule","declarations","ApiServiceService","http","jwtService","getRawToken","httpOptions","headers","ErrorEvent","message","status","pathUrl","apiUrl","setHeaders","pipe","handleError","postUrl","body","post","delUrl","putUrl","put"],"mappings":"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","file":"broad-cast-broad-cast-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n\r\n  constructor() { }\r\n\r\n  setToken(token: string) {\r\n    sessionStorage.setItem('token', JSON.stringify(token));\r\n    return true;\r\n  }\r\n  getToken() {\r\n    const helper = new JwtHelperService();\r\n    const token = JSON.parse(sessionStorage.getItem('token'));\r\n    const decodedToken = helper.decodeToken(token);\r\n    return decodedToken;\r\n  }\r\n  getRawToken() {\r\n    return sessionStorage.getItem('token');\r\n  }\r\n}\r\n","import { BroadCastViewComponent } from './broad-cast-view/broad-cast-view.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BroadCastViewComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BroadCastRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {NgxSpinnerService} from 'ngx-spinner';\nimport {BroadCastViewService} from './broad-cast-view.service';\n\n@Component({\n  selector: 'app-broad-cast-view',\n  templateUrl: './broad-cast-view.component.html',\n  styleUrls: ['./broad-cast-view.component.scss']\n})\nexport class BroadCastViewComponent implements OnInit {\n  messageList: []\n  constructor(\n    private apiService: BroadCastViewService,\n    private spinner: NgxSpinnerService,\n  ) { }\n\n  ngOnInit(): void {\n    this.getBroadcastMessages();\n  }\n\n  public getBroadcastMessages() {\n    this.spinner.show();\n    this.apiService.getMessages().subscribe(\n      data => {\n        this.messageDetails(data);\n      },\n      error => {\n        this.spinner.hide();\n        console.log(error);\n      }\n    );\n  }\n\n  private messageDetails(data) {\n    this.spinner.hide();\n    console.log(data);\n    if (data.statusCode === 200){\n      this.messageList = data.data;\n    }else{\n      this.messageList = [];\n    }\n  }\n\n}\n","<section id=\"top-section\">\n  <div class=\"page_banner\">\n    <div class=\"container\">\n      <h2>Broadcast Messages</h2>\n    </div>\n  </div>\n</section>\n\n<section class=\"broad-cast\">\n  <div class=\"mesgs\">\n    <div class=\"msg_history\">\n      <ng-container *ngFor=\"let item of messageList\" >\n      <div class=\"incoming_msg\" *ngIf=\"item.name === 'founder'\" >\n        <div class=\"incoming_msg_img\"> <img src=\"https://ptetutorials.com/images/user-profile.png\" alt=\"sunil\"> </div>\n        <div class=\"received_msg\">\n          <div class=\"received_withd_msg\">\n            <div *ngIf=\"item.file_type === 'image'\">\n              <img [src]=\"item.file\" />\n            </div>\n            <div *ngIf=\"item.file_type === 'audio'\">\n              <audio controls>\n                <source [src]=\"item.file\" type=\"audio/ogg\">\n                <source [src]=\"item.file\" type=\"audio/mpeg\">\n                Your browser does not support the audio element.\n              </audio>\n            </div>\n            <div *ngIf=\"item.file_type === 'video'\">\n              <video width=\"320\" height=\"240\" controls>\n                <source [src]=\"item.file\" type=\"video/mp4\">\n                <source [src]=\"item.file\" type=\"video/ogg\">\n                Your browser does not support the video tag.\n              </video>\n            </div>\n            <div *ngIf=\"item.message !== ''\">\n              <p>{{item.message}}</p>\n            </div>\n\n            <span class=\"time_date\"> {{item.publish_date | date: 'h:mm a'}}    |     {{item.publish_date | date: 'MMM d, y'}}</span></div>\n        </div>\n      </div>\n      <div class=\"outgoing_msg\" *ngIf=\"item.name !== 'founder'\">\n        <div class=\"sent_msg\">\n          <div *ngIf=\"item.file_type === 'image'\">\n            <img [src]=\"item.file\" />\n          </div>\n          <div *ngIf=\"item.file_type === 'audio'\">\n            <audio controls>\n              <source [src]=\"item.file\" type=\"audio/ogg\">\n              <source [src]=\"item.file\" type=\"audio/mpeg\">\n              Your browser does not support the audio element.\n            </audio>\n          </div>\n          <div *ngIf=\"item.file_type === 'video'\">\n            <video width=\"320\" height=\"240\" controls>\n              <source [src]=\"item.file\" type=\"video/mp4\">\n              <source [src]=\"item.file\" type=\"video/ogg\">\n              Your browser does not support the video tag.\n            </video>\n          </div>\n          <div *ngIf=\"item.message !== ''\">\n            <p>{{item.message}}</p>\n          </div>\n          <span class=\"time_date\"> {{item.publish_date | date: 'h:mm a'}}    |     {{item.publish_date | date: 'MMM d, y'}}</span> </div>\n      </div>\n      </ng-container>\n    </div>\n    <!--<div class=\"type_msg\">-->\n      <!--<div class=\"input_msg_write\">-->\n        <!--<input type=\"text\" class=\"write_msg\" placeholder=\"Type a message\" />-->\n        <!--<button class=\"msg_send_btn\" type=\"button\"><i class=\"fa fa-paper-plane-o\" aria-hidden=\"true\"></i></button>-->\n      <!--</div>-->\n    <!--</div>-->\n  </div>\n</section>\n","import { Injectable } from '@angular/core';\nimport {ApiServiceService} from '../../shared/service/api-service.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BroadCastViewService {\n\n  constructor(\n    private apiService: ApiServiceService\n  ) { }\n\n  public getMessages(){\n    return this.apiService.get('broadcast');\n  }\n}\n","import { BroadCastRoutingModule } from './broad-cast-routing.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BroadCastViewComponent } from './broad-cast-view/broad-cast-view.component';\n\n\n\n@NgModule({\n  declarations: [BroadCastViewComponent],\n  imports: [\n    CommonModule,\n    BroadCastRoutingModule\n  ]\n})\nexport class BroadCastModule { }\n","import { JwtService } from './../../auth/jwt.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiServiceService {\r\n\r\n\r\n  constructor(private http: HttpClient, private jwtService: JwtService) { }\r\n\r\n  private setHeaders() {\r\n    const token = this.jwtService.getRawToken();\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        // tslint:disable-next-line: object-literal-key-quotes\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n    return httpOptions;\r\n  }\r\n\r\n//   private setPostHeaders() {\r\n//     const token = this.jwtService.getRawToken();\r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//        // 'Content-Type': \"application/json\",\r\n//         'Authorization': 'Bearer '+token\r\n//       })\r\n//     };\r\n//     return httpOptions;\r\n//   }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // client-side or network error occurred.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      `${JSON.stringify(error.error.error)}`\r\n    );\r\n  }\r\n\r\n  get(pathUrl) {\r\n\r\n    return this.http.get(`${environment.apiUrl}${pathUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  post(postUrl, body: Object) {\r\n    return this.http.post(`${environment.apiUrl}${postUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  delete(delUrl) {\r\n    return this.http.delete(`${environment.apiUrl}${delUrl}`, this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n  // tslint:disable-next-line: ban-types\r\n  put(putUrl, body: Object) {\r\n    return this.http.put(`${environment.apiUrl}${putUrl}`, JSON.stringify(body), this.setHeaders())\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n//   postFile(postUrl, body: any) {\r\n//     return this.http.post(`${environment.apiUrl}${postUrl}`, body, this.setPostHeaders() )\r\n//       .pipe(\r\n//         catchError(this.handleError)\r\n//       );\r\n//   }\r\n  /****************The below can be used if the entire http response is required to pass to component**************************/\r\n  // getConfigResponse(): Observable<HttpResponse<any>> {\r\n  //   return this.http.get<any>(\r\n  //     this.configUrl, { observe: 'response' })\r\n  //     .pipe(\r\n  //       catchError(this.handleError)\r\n  //     );\r\n  // }\r\n}\r\n"]}